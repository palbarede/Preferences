# ~/.tmux.conf
# vim: ft=tmux

# right status bar
set -g status-right "#(uptime|awk '{print \$NF}') #($HOME/bin/fuzzyclock.zsh)"

# turn off automatic renaming
set-window-option -g automatic-rename off

# su linux ho avuto problemi con il PATH, ho dovuto aggiungere:
# set -g default-shell '/bin/zsh'
# set-option -g default-command "exec /bin/zsh"
#set-option -g default-command "exec $SHELL"
set-option -g default-command zsh

# don't like the bell
set -g bell-action none
# show tmux messages for 3000 ms
set -g display-time 3000

# status bar colors
set -g status-bg black
set -g status-fg white
set-window-option -g window-status-current-bg yellow
set-window-option -g window-status-current-fg black
set-window-option -g window-status-current-attr dim

# vi keys
set-window-option -g mode-keys vi
set -g status-keys vi

# enable wm window titles
set -g set-titles on

# enable utf8 globally
set-window-option -g utf8 on

# wm window title string (uses statusbar variables)
set -g set-titles-string "tmux.#I.#W"

# open a man page in new window
bind / command-prompt "split-window 'exec man %%'"

# ssh?
bind '~' command-prompt "split-window 'exec ssh %%'"

# quick view of processes
bind 'H' split-window "exec htop"

# splitto
bind 'S' split-window


# BINDINGS
# ctrl + page up (PPage): previous window
# ctrl + page down (NPage): next window
# bind -n C-PPage previous-window
# bind -n C-NPage next-window

# alt + page up (PPage): previous window
# alt + page down (NPage): next window
bind -n M-PPage previous-window
bind -n M-NPage next-window

# alt+left: previous window
# alt+right: next window
bind -n M-left previous-window
bind -n M-right next-window

# F8: previous window
# F9: next window
bind -n F8 previous-window
bind -n F9 next-window

# Set the prefix to ^A, or `, or ^F...
#### WARNING
# C'e' un problema se uso ` come prefix, ovvero viene preso
# anche quando si incolla con il mouse... quindi se incollo
# `ciao, lo prende come un comando.
unbind C-b
### set -g prefix "`"
### bind "`" send-prefix
### # OSX:
### # set -g prefix ^A
### # bind a send-prefix
### # bind ^A next-window
### if '[ -d /Applications ]' 'set -g prefix ^A'
### if '[ -d /Applications ]' 'bind a send-prefix'
### if '[ -d /Applications ]' 'unbind "`"'
set -g prefix ^A
bind a send-prefix

# Bind appropriate commands similar to screen.
# lockscreen ^X x 
unbind ^X
bind ^X lock-server
unbind x
bind x lock-server

# screen ^C c 
unbind ^C
bind ^C new-window
bind c
bind c new-window

# detach ^D d
unbind ^D
bind ^D detach

# displays * 
unbind *
bind * list-clients

# next ^@ ^N sp n 
unbind ^@
bind ^@ next-window
unbind ^N
bind ^N next-window
unbind " "
bind " " next-window
unbind n
bind n next-window

# title A
unbind A
bind A command-prompt "rename-window %%"

# other ^A
unbind ^A
bind ^A last-window

# prev ^H ^P p ^? 
unbind ^H
bind ^H previous-window
unbind ^P
bind ^P previous-window
unbind p
bind p previous-window
unbind BSpace
bind BSpace previous-window

# windows ^W w 
unbind ^W
bind ^W list-windows
unbind w
bind w list-windows

# quit \ 
unbind \
bind \ confirm-before "kill-server"

# kill K k 
unbind K
bind K confirm-before "kill-window"
unbind k
bind k confirm-before "kill-window"

# redisplay ^L l 
unbind ^L
bind ^L refresh-client
unbind l
bind l refresh-client

# split -v |
unbind |
bind | split-window

# :kB: focus up
unbind Tab
bind Tab down-pane
unbind BTab
bind BTab up-pane

# " windowlist -b
unbind '"'
bind '"' choose-window

if '[ -e ~/.tmux.local ]' 'source ~/.tmux.local'

# Esempio:
### # Crea una nuova sessione "main", e una finestra "info"
### # in "info" c'e' nload, htop e iotop splittati
### new -d -s main -n info 'exec nload'
### setw -tmain:0 aggressive-resize on
### splitw -t0 'exec iotop'
### splitw -t0 'exec htop'
### selectl -t0 even-vertical
### upp
### upp
### neww
