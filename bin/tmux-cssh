#!/usr/bin/env zsh
# tmux cluster ssh + knife support
# Daniel Kertesz <daniel@spatof.org>
#
# Add basic hosts completion to zsh by running:
# compdef _hosts tmux-cssh

function fatal() {
    echo "ERROR: $@"
    exit 1
}

user_query=""
query=()
ssh_options=()
do_log=0

while getopts ":r:p:q:u:lPvh" opt; do
    case $opt in
        l)
            do_log=1
            ;;
        r)
            query+="role:hg_$OPTARG"
            ;;
        p)
            query+="zendesk_config_pod:$OPTARG"
            ;;
        P)
            query+="chef_environment:production"
            ;;
        q)
            user_query=$OPTARG
            ;;
        u)
            ssh_options+="-l$OPTARG"
            ;;
        v)
            ssh_options+="-v"
            ;;
        h)
            printf "Usage: $(basename $0) [OPTIONS] [HOSTS...]\n"
            printf "NOTE: hostnames will be read from stdin if no query option is used.\n\n"
            printf " -l\t\tCapture each tmux pane output to a file\n"
            printf " -p <pod>\tSpecify a pod by number\n"
            printf " -P\t\tLimit search to production nodes\n"
            printf " -q <query>\tSpecify a custom knife search query\n"
            printf " -r <role>\tSpecify a hostgroup role\n"
            printf " -u <user>\tSpecify the user to log in as\n"
            printf " -v\t\tRun a verbose ssh session\n"
            printf " -h\t\tShow this help\n"
            exit
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument" >&2
            exit 1
            ;;
    esac
done

shift $((OPTIND-1))

hosts=()

# NOTE: do not redirect knife stderr, we need to see errors.
if [[ $#query > 0 ]]; then
    # using knife search
    hosts=$(knife search node -i "${(j: AND :)query}")
elif [[ ! -z $user_query ]]; then
    # using custom user knife search
    hosts=$(knife search node -i "$user_query")
elif [[ $# == 0 ]]; then
    # reading hosts from stdin
    while read line; do
        hosts+=$line
    done
else
    # reading hosts from command line
    hosts+=($@)
fi

if [[ $#hosts = 0 ]]; then
    fatal "No hosts matched your query"
fi

SESSION="cssh-$$"
WINDOW="${SESSION}:1"

now=$(date +"%d-%m-%Y-%H:%M")
logname="$PWD/tmux-cssh.${now}.#P.HOST.log"
i=1

tmux new-session -d -s $SESSION -P ssh $ssh_options[@] $hosts[1]
[[ $do_log = 1 ]] && tmux pipe-pane -t ${WINDOW}.$i "cat >> ${logname/HOST/$hosts[1]}"
i=$((i+1))
shift hosts

for host in $hosts; do
    tmux split-window -t $WINDOW ssh $ssh_options[@] $host
    tmux select-layout -t $WINDOW tiled
    [[ $do_log = 1 ]] && tmux pipe-pane -t ${WINDOW}.$i "cat >> ${logname/HOST/${host}}"
    i=$((i+1))
done

tmux setw -t $WINDOW status off
tmux setw -t $WINDOW synchronize-panes on
tmux switch-client -t $SESSION
