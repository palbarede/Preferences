#!/usr/bin/env zsh
# tmux cluster ssh + knife support
# Daniel Kertesz <daniel@spatof.org>
#
# Add basic hosts completion to zsh by running:
# compdef _hosts tmux-cssh

set -e

function fatal() {
    echo "ERROR: $@" >&2
    exit 1
}

function phelp() {
    printf "%-15s\t%s\n" "$1" "$2"
}

user_query=""
query=()
ssh_options=()
do_log=0

while getopts ":r:p:q:l:LPvh" opt; do
    case $opt in
        L)
            do_log=1
            ;;
        r)
            query+="role:hg_$OPTARG"
            ;;
        p)
            query+="zendesk_config_pod:$OPTARG"
            ;;
        P)
            query+="chef_environment:production"
            ;;
        q)
            user_query="$OPTARG"
            ;;
        l)
            ssh_options+="-l$OPTARG"
            ;;
        v)
            ssh_options+="-v"
            ;;
        h)
            printf "Usage: $(basename $0) [-LPvh] [-p pod] [-q query] [-r role] [-l user] [host ...]\n"
            printf "NOTE: hostnames will be read from stdin when no arguments are specified.\n\n"
            phelp "-l <user>" "Specifies the user to log in as on the remote machines"
            phelp "-L" "Capture each pane output to a file"
            phelp "-p <pod>" "Search by Pod number"
            phelp "-P" "Limit the search to production nodes"
            phelp "-q <query>" "Specify a custom knife search query"
            phelp "-r <role>" "Search by hostgroup role"
            phelp "-v" "Run a verbose ssh session"
            phelp "-h" "Show this help"
            exit
            ;;
        \?)
            fatal "Invalid option: -$OPTARG"
            ;;
        :)
            fatal "Option -$OPTARG requires an argument"
            ;;
    esac
done

shift $((OPTIND-1))

hosts=()

# NOTE: do not redirect knife stderr, we need to see errors.
if [[ $#query > 0 ]]; then
    # using knife search
    hosts=($(knife search node -i "${(j: AND :)query}"))
elif [[ ! -z $user_query ]]; then
    # using custom user knife search
    hosts=($(knife search node -i "$user_query"))
elif [[ $# == 0 ]]; then
    # reading hosts from stdin
    while read line; do
        hosts+=$line
    done
else
    # reading hosts from command line
    hosts+=($@)
fi

if [[ $#hosts = 0 ]]; then
    fatal "No hosts matched your query or knife command has failed"
fi

SESSION="cssh-$$"
WINDOW="${SESSION}:1"

now=$(date +"%d-%m-%Y-%H:%M")
logname="$PWD/tmux-cssh.${now}.#P.HOST.log"
i=1

tmux new-session -d -s $SESSION -P ssh $ssh_options[@] $hosts[$i]
[[ $do_log = 1 ]] && tmux pipe-pane -t ${WINDOW}.$i "cat >> ${logname/HOST/$hosts[$i]}"
i=$((i+1))

while [[ $i -le $#hosts ]]; do
    tmux split-window -t $WINDOW ssh $ssh_options[@] $hosts[$i]
    tmux select-layout -t $WINDOW tiled
    [[ $do_log = 1 ]] && tmux pipe-pane -t ${WINDOW}.$i "cat >> ${logname/HOST/$hosts[$i]}"
    i=$((i+1))
done

tmux setw -t $WINDOW status off
tmux setw -t $WINDOW synchronize-panes on
tmux switch-client -t $SESSION
