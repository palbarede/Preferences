# ===============================================================
# ~/.zsh/os/darwin
# ---------------------------------------------------------------

# -*- aliases
# Spostato in zshenv per averlo negli script (tipo il mio vimpager)
# if [[ -e /Applications/MacVim.app ]]; then
#     alias vim="/Applications/MacVim.app/Contents/MacOS/Vim"
#     alias gvim="/Applications/MacVim.app/Contents/MacOS/MacVim"
# fi

alias dosbox='/Applications/DOSBox.app/Contents/MacOS/DOSBox'
alias run_dosbox='/Applications/DOSBox.app/Contents/MacOS/DOSBox -conf'

# da https://github.com/sjl/dotfiles/blob/master/fish/config.fish e da VERIFICARE (e convertire in zsh)
alias spotlight-info='sudo fs_usage -w -f filesys mdworker | grep "open"'
# alias spotlight-off 'sudo mdutil -a -i off ; and sudo mv /System/Library/CoreServices/Search.bundle/ /System/Library/CoreServices/SearchOff.bundle/ ; and killall SystemUIServer'
# alias spotlight-on 'sudo mdutil -a -i on ; and sudo mv /System/Library/CoreServices/SearchOff.bundle/ /System/Library/CoreServices/Search.bundle/ ; and killall SystemUIServer'

# suffix aliases
# Esempio:
# ~/Pictures $ *.jpeg
#	-> Eseguira': open *.jpeg
alias -s pdf='open'
alias -s avi='open'
alias -s jpeg='open'
alias -s jpg='open'
alias -s mp4='open'		# video -> quicktime o vlc

# Homebrew
[[ -d /usr/local/bin ]] && export PATH="/usr/local/bin:${PATH}"
# completion: ln -s "$(brew --prefix)/Library/Contributions/brew_zsh_completion.zsh" ~/.zsh/func/_brew
# ls da `homebrew` -> `coreutils`
if [[ -x /usr/local/bin/gls && "$TERM" != dumb ]]; then
    alias ls="gls --color=auto -F"
    (( $+commands[gdircolors] )) && eval $(gdircolors -b ~/Preferences/dircolors/dircolors.256dark)
    alias lss="gls --color=auto -F --group-directories-first"
    alias reals="command ls"
fi

# ssh-askpass

if [[ -x /usr/libexec/ssh-askpass ]]; then
	export SSH_ASKPASS=/usr/libexec/ssh-askpass
fi

# -*- environment
export CLICOLOR=1
#export PERL5LIB=$PERL5LIB:~/perl/lib/perl5/site_perl

# Questo e' un fix per i default sballati di OSX (Lion?)
if [[ $LC_CTYPE == "UTF-8" ]]; then
	export LC_CTYPE="en_US.UTF-8"
fi

# Supporto per la struttura di directory "local" (il --user di setup.py) su OSX
[[ -e ~/Library/Python/2.7/bin ]] && export PATH=~/Library/Python/2.7/bin:$PATH

# Aggiunge /usr/local/lib/python a PYTHONPATH per PyQt4 (installato tramite brew)
# export PYTHONPATH=/usr/local/lib/python:$PYTHONPATH
if [[ -d /usr/local/lib/python2.7/site-packages ]]; then
	export PYTHONPATH=/usr/local/lib/python2.7/site-packages:$PYTHONPATH
fi

# Node.js / NPM
# After installing, add the following path to your NODE_PATH environment
# variable to have npm libraries picked up:
#   /usr/local/lib/node_modules
[[ -d /usr/local/lib/node_modules ]] && export NODE_PATH=/usr/local/lib/node_modules

# da oh-my-zsh
function quick-look() {
	(( $# > 0 )) && qlmanage -p $* &>/dev/null &
}

# Trasforma la man page in PDF e la apre con Preview, votamazzen.
function man-preview() {
	man -t "$@" | open -f -a Preview
}

# print Finder directory
function pfd() {
	osascript 2>/dev/null <<EOF
tell application "Finder"
	return POSIX path of (target of window 1 as alias)
end tell
EOF
}

# cd to Finder directory
cdf() { eval cd "$(osascript -e 'tell app "Finder" to return the quoted form of the POSIX path of (target of window 1 as alias)' 2>/dev/null)" }

# print Finder selection
function pfs() {
  osascript 2>/dev/null <<EOF
    set output to ""
    tell application "Finder" to set the_selection to selection
    set item_count to count the_selection
    repeat with item_index from 1 to count the_selection
      if item_index is less than item_count then set the_delimiter to "\n"
      if item_index is item_count then set the_delimiter to ""
      set output to output & ((item item_index of the_selection as alias)'s POSIX path) & the_delimiter
    end repeat
EOF
}

# cli volume control
vol() {
	if [[ -n $1 ]]; then
		osascript -e "set volume output volume $1"
	else
		osascript -e "output volume of (get volume settings)"
	fi
}
		
# locate with Spotlight
locatemd() {
	mdfind "kMDItemDisplayName == '$@'wc"
}

# Flush DNS cache
alias flush_dns_cache='dscacheutil -flushcache'

# fix per gcc e clang da CLI developer tools apple (e non da Xcode)
# in teoria con Xcode /usr/bin/gcc e' un symlink a clang, invece installando
# i CLI no... boh?
# export CC=/usr/bin/clang

# xcode 5.1
# http://kaspermunck.github.io/2014/03/fixing-clang-error/
export ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future

# vim: ft=zsh
