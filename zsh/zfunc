# =====================================================================
# ~/.zsh/zfunc
# Funzioni per varie funzioni; essendo brevi non uso il metodo autoload
# ---------------------------------------------------------------------

# zsh profiling
# just execute 'ZSH_PROFILE_RC=1 zsh' and run 'zprof' to get the details
if [[ $ZSH_PROFILE_RC -gt 0 ]] ; then
    zmodload zsh/zprof
fi

# Utile per i dotfiles
# zmv $HOME'/dotfiles/dot_(*)' '$HOME/$1'

# tree amanuense se non c'e' il pacchetto installato {{{
# from strcat.de
if (( ! $+commands[tree] )); then
	tree() { find . | sed -e 's/[^\/]*\//|----/g' -e 's/---- |/    |/g' | $PAGER }
fi
# }}}


# copia pv
# % (tar cf - files.* | pv -n -s $(gdu -csb files.* | tail -1 | awk '{print $1}') | (cd /Volumes/Expansion\ Drive; tar xf - )) 2>&1 | dialog --gauge 'Progress' 7 70

rscreen () {
    autossh -t $1 "screen -e^Ff -daAR"
}

# IDEE
#
# Questo setta uno style
zstyle ":chpwd:profiles:${HOME}/Work(|/|/*)" profile work

# Questo controlla se esiste uno style corrispondente
function controlla() {
	local -x profile

	zstyle -s ":chpwd:profiles:${PWD}" profile profile || profile='default'
	print $profile
}
# controlla

# https://github.com/myfreeweb/zshuery/blob/master/zshuery.sh
rot13() {
	echo $1 | tr "A-Za-z" "N-ZA-Mn-za-m"
}

latrus() {
	echo $1 | tr "qwertyuiop[]asdfghjkl;'zxcvbnm,.QWERTYUIOP{}ASDFGHJKL:\"ZXCVBNM" "йцукенгшщзхъфывапролджэячсмитьбюЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ"
}

ruslat() {
	echo $1 | tr "йцукенгшщзхъфывапролджэячсмитьбюЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ" "qwertyuiop[]asdfghjkl;'zxcvbnm,.QWERTYUIOP{}ASDFGHJKL:\"ZXCVBNM"
}

urlencode() { python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1])" $1 }
urldecode() { python -c "import sys, urllib as ul; print ul.unquote_plus(sys.argv[1])" $1 }

# https://github.com/myfreeweb/zshuery/blob/master/zshuery.sh
# Apre una man page con Preview (la converte in PDF)
preview_man() {
	man $1 -t | open -f -a Preview
}

# check limits for a process
# http://docs.mongodb.org/manual/reference/ulimit/
return-limits(){

     for process in $@; do
          process_pids=`ps -C $process -o pid --no-headers | cut -d " " -f 2`

          if [ -z $@ ]; then
             echo "[no $process running]"
          else
             for pid in $process_pids; do
                   echo "[$process #$pid -- limits]"
                   cat /proc/$pid/limits
             done
          fi

     done
}

# ansible mk-role
mkrole() {
    if [[ -z $1 ]]; then
	echo "Usage: $(basename $0) <role name>"
	exit 1
    fi
    if [[ ! -d roles ]]; then
	echo "Missing 'roles' directory"
	exit 1
    fi
    mkdir -p roles/$1/{tasks,handlers,templates,files,vars,defaults,meta}
}

# from: grml
ssl_hashes=( sha512 sha256 sha1 md5 )

for sh in ${ssl_hashes}; do
    eval 'ssl-cert-'${sh}'() {
        emulate -L zsh
        if [[ -z $1 ]] ; then
            printf '\''usage: %s <file>\n'\'' "ssh-cert-'${sh}'"
            return 1
        fi
        openssl x509 -noout -fingerprint -'${sh}' -in $1
    }'
done; unset sh

ssl-cert-fingerprints() {
    emulate -L zsh
    local i
    if [[ -z $1 ]] ; then
        printf 'usage: ssl-cert-fingerprints <file>\n'
        return 1
    fi
    for i in ${ssl_hashes}
        do ssl-cert-$i $1;
    done
}

ssl-cert-info() {
    if [[ -z $1 ]]; then
        echo "Usage: ssl-cert-info <file>"
        exit 1
    fi
    openssl x509 -noout -text -in $1
}
}

# vim: ft=zsh
