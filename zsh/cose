# ===============================================================
# ~/.zsh/cose
# Impostazioni e alias che dipendono dal sistema operativo in uso
# ---------------------------------------------------------------

# -F      Display a slash (`/') immediately after each pathname that is a
# directory, an asterisk (`*') after each that is executable, an at sign
# (`@') after each symbolic link, an equals sign (`=') after each socket,
# a percent sign (`%') after each whiteout, and a vertical bar (`|') after
# each that is a FIFO.
ls_opts='-F'
# se l'user e' root mostra SEMPRE i file nascosti
[[ $UID = 0 ]] && ls_opts='-FA'

# OSTYPE prende il valore da un #define in compilazione,
# non e' del tutto safe.
# [27/02/11] Pero'... se compili su osx, usi su osx, mentre se compili su linux
# usi su linux, quindi evito di accedere al disco inutilmente.

if [[ $OSTYPE == darwin* ]]; then
    # OS X
    source ${ZDOTDIR}/os/darwin
 
elif [[ $OSTYPE == linux* ]]; then
    # Ubuntu / GNU/Linux
    source ${ZDOTDIR}/os/linux

elif [[ $OSTYPE = solaris* ]]; then
    # Solaris
    source ${ZDOTDIR}/os/solaris

elif [[ $OSTYPE = openbsd* ]]; then
    # OpenBSD
    source ${ZDOTDIR}/os/openbsd
fi

# umask per directory
#
# NOTA: la tabella 'umask_table' e' sequenziale e verra' scelto il primo
# match valido, percio' se si vuole impostare una umask per una directory e per
# una sua sotto directory bisognera' impostare prima quella della sottodirectory.
#
# INOLTRE: il path della directory deve essere racchiuso tra apici e puo' contenere
# white-space.
#
# Esempio:
# umask_table=(
#	'~/Work/FooBar' 022
#	'~/Work' 011
# )

typeset -A umask_table
umask_table=(
	'~/Work' 007
	'~/ciao ciao' 011
)

umask_chpwd() {
	local current_umask=$(umask)

	for dir new_umask in ${(kv)umask_table}; do
		if [[ "$PWD" == ${~dir}* ]]; then
			[[ $current_umask == $new_umask ]] && return
			echo "$fg[green][zsh] Switching to '$fg[red]$dir$fg[green]' umask: $fg[red]$new_umask"
			PREVIOUS_UMASK=$current_umask
			umask $new_umask
			return
		fi
	done
	if [[ ! -z $PREVIOUS_UMASK ]]; then
		echo "$fg[green][zsh] Switching to '$fg[red]previous$fg[green]' umask: $fg[red]$PREVIOUS_UMASK"
		umask $PREVIOUS_UMASK
		unset PREVIOUS_UMASK
	fi
}

export -a chpwd_functions
chpwd_functions=( "${chpwd_functions[@]}" umask_chpwd )

# virtualenvwrapper per python
# uso il test -z per evitare di caricare tutto il carrozzone python per ogni nuova shell.
if [[ -e /usr/local/bin/virtualenvwrapper.sh && -z $VIRTUALENVWRAPPER_PYTHON ]]; then
	[[ ! -d ~/tmp/virtualenvs ]] && mkdir -p ~/tmp/virtualenvs
	export WORKON_HOME=~/tmp/virtualenvs
	source /usr/local/bin/virtualenvwrapper.sh
fi

# zsh-syntax-highlighting
if [[ -e ~/dev/others/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]]; then
	source ~/dev/others/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

# vim: ft=zsh
