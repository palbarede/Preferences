# ssh wrapper function to set tmux window (pane?) title

# bypass this function if stdout is not a terminal, to avoid messing up
# the output with our printf() calls.
[[ -t 1 ]] || exec command ssh $@

local prev_window_name=$(tmux display-message -p "#{window_name}")
local prev_pane_title=$(tmux display-message -p "#{pane_title}")

local win_escape_start="\033k"
local pane_escape_start="\033]2;"
local escape_end="\033\\"

set_pane_title() {
    printf "$pane_escape_start$1$escape_end"
}

set_window_title() {
    printf "$win_escape_start$1$escape_end"
}

local hostname=$(ssh -G "$@" | awk 'NR > 2 { exit }; /^hostname/ { print $2 }')

if [[ -z $hostname ]]; then
    command ssh $@
else
    # try to shorten the hostname

    # 1) split the hostname on "."
    local parts=(${(s:.:)hostname})
    local short_name

    # 2) if the parts of the hostname are less than 3 (e.g. mail.example.com -> 3 parts)
    # use the first part only (e.g. "mail")
    if (( $#parts <= 3 )); then
        short_name=${parts[1]}
    else
        # othewrise show 2/3 of the hostname
        local fraction=$(( $#parts / 3 * 2 ))
        short_name=${(j:.:)parts[1,$fraction]}
    fi
    # Set window name and pane title when there's only 1 pane (i.e. the whole window),
    # otherwise set just the pane title.
    if [[ $(tmux display-message -p "#{window_panes}") == 1 ]]; then
        # Use a shortened version of the hostname for the window title
        set_window_title $short_name
        set_pane_title $hostname
    else
        set_pane_title $hostname
    fi
    command ssh $@
    if [[ $(tmux display-message -p "#{window_panes}") == 1 ]]; then
        set_window_title $prev_window_name
    fi
    set_pane_title $prev_pane_title
fi
