#+TITLE: my emacs settings
#+AUTHOR: Daniel Kertesz
#+EMAIL: daniel [at] spatof [dot] org
#+STARTUP: align content 
#+LANGUAGE: en

* Emacs Configuration
This is an org document describing my Emacs configuration.
To load it place the following lines inside =~/.emacs.d/init.el=:

#+BEGIN_SRC emacs-lisp :tangle no
(require 'org)
(org-babel-load-file
 (expand-file-name "emacs-settings.org"
                   user-emacs-directory))
#+END_SRC

This file is heavily inspired by [[http://p.writequit.org/org/settings.html#sec-1-5][Lee's emacs settings file]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha
Chua's Emacs configuration]], which could probably be nice to open
directly from here [[https://raw.githubusercontent.com/dakrone/dakrone-dotfiles/master/.emacs.d/settings.org][Lee's emacs]] and [[https://raw.githubusercontent.com/sachac/.emacs.d/gh-pages/Sacha.org][Sacha.org]].

Note about =setq= vs. =setq-default=:

#+BEGIN_QUOTE
If a variable is buffer-local, then setq sets its local value in the
current buffer and setq-default sets the global default value.

If a variable is not buffer-local, then setq and setq-default do the
same thing.
#+END_QUOTE

** Installation notes
On OS X the best setup is achieved by installing the basic =emacs= for
the command line and =emacs-mac-port= for the GUI; the latter has
better integration with OS X.

*** Themes
I usually leave the configuration of the theme inside the /local/
settings file, to customize it for the environment I am (work, home).

A list of dark themes:

- base16 (*)
- ujelly (black bg)
- moe (colorful)
- twilight (black bg)
- birds-of-paradise
- alect
- ample
- sanityinc-tomorrow
- obsidian
- solarized
- tangotango
- twilight-anti-bright

Light themes:

- soft-morning: gray bg, soft colors
- flatui (light)
- leuven (light)

List of interesting themes that I prefer to have listed here instead
of being installed locally, cluttering my =package-list-packages=
invocations with useless updates.

- atom-one-dark-theme
- birds-of-paradise
- color-theme-sanityinc-tomorrow
- flatui-theme
- leuven-theme
- material-theme
- moe-theme
- obsidian-theme
- soft-morning-theme
- solarized-theme
- tangotango-theme
- twiligh-anti-bright-theme
- twilight-bright-theme
- twilight-theme
- ujelly-theme

A page with an overview of [[http://raebear.net/comp/emacscolors.html][available colors]].

** Keyboard shortcuts
General emacs shortcuts:

| Shortcut  | What it does             | Usage frequency |
|-----------+--------------------------+-----------------|
| =C-x g=   | open Magit               | Very often      |
| =C-x C-j= | open dired-x at file     | Never :(        |
| =j u=     | magit: salta a unstaged  | Rarely          |
| =C-c h=   | helm-mini                | Rarely          |
| =C-s C-w= | search for word at point | Never           |
| =C-h r=   | open the Emacs manual    | Always forget   |

Org shortcuts:

| Shortcut      | What it does                        |
|---------------+-------------------------------------|
| =C-c C-p=     | jump to previous heading            |
| =C-c C-n=     | jump to next heading                |
| =M-UP/DOWN=   | move a heading/row/thing up or down |
| =C-c C-t=     | toggle TODO state                   |
| =C-c a=       | open Agenda                         |
| =C-c C-x C-i= | start clocking the current task     |
| =C-c C-x C-o= | stop clocking the current task      |

A note about completion: =M-/= runs =dabbrev= (or =hippie-expand=) to
*expand* text, while =TAB= runs try to complete the text using some
completion backend like =company=.

** Packages
Packages setup should be done early during emacs initialization; I
copied a function from prelude to check and install packages from a
list.

#+BEGIN_SRC emacs-lisp
(require 'cl)
(require 'package)

(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)

(when (and (>= emacs-major-version 24)
           (>= emacs-minor-version 4))
  (add-to-list 'package-archives
               '("melpa-stable" . "http://stable.melpa.org/packages/") t)
  (setq package-pinned-packages '(
                                  (magit . "melpa-stable")
                                  (with-editor . "melpa-stable")
                                  (git-commit . "melpa-stable")
                                  (magit-popup . "melpa-stable")
                                  (flycheck . "melpa-stable")
                                  )))

;; load and activate installed packages
(package-initialize)

(defvar my-packages
 '(
   ; browse-kill-ring
   ; flx-ido
   ; ido-ubiquitous
   ; osx-plist
   ; xkcd
   ; anaconda-mode
   ; pyenv-mode
   ; yasnippet
   ; google-translate
   ace-jump-mode
   alert
   anzu
   apache-mode
   base16-theme
   buffer-move
   company
   company-go
   dictionary
   diminish
   evil
   exec-path-from-shell
   expand-region
   git-gutter
   gitconfig-mode
   gitignore-mode
   go-eldoc
   go-mode
   gotest
   helm
   helm-projectile
   js2-mode
   json-mode
   less-css-mode
   magit
   markdown-mode
   move-text
   nginx-mode
   php-mode
   projectile
   rainbow-delimiters
   rainbow-mode
   undo-tree
   unfill
   use-package
   volatile-highlights
   web-mode
)
 "A list of packages to ensure are installed at launch")

(defun my-packages-installed-p ()
  "Check if all packages in `my-packages' are installed"
  (every #'package-installed-p my-packages))

(defun pl-require-package (package)
  "Install PACKAGE unless already installed"
  (unless (memq package my-packages)
    (add-to-list 'my-packages package))
  (unless (package-installed-p package)
    (package-install package)))

(defun pl-require-packages (packages)
  "Ensure PACKAGES are installed"
  (mapc #'pl-require-package packages))

(defun pl-install-packages ()
  "Install all packages listed in `my-packages'"
  (unless (my-packages-installed-p)
    (message "%s" "refreshing the package database...")
    (package-refresh-contents)
    (message "%s" "done.")
    (pl-require-packages my-packages)))

;; install missing packages
(pl-install-packages)

;; enable use-package asap
;; !! changed in use-package 2.0
(eval-when-compile
  (require 'use-package))
(require 'diminish)
(require 'bind-key)

; TODO XXX subword-mode appears as " , " in emacs modeline...
; (diminish 'subword-mode)

;; `exec()` PATH from shell
;; Questo va messo PRIMA di tutto perche' altrimenti tutti i PATH
;; presi dai vari plugin non prendono il setting e pescano la roba in
;; /usr/bin invece di /usr/local/bin
(when (memq window-system '(mac ns))
  (setq exec-path-from-shell-variables
        '("PATH" "MANPATH" "PYTHONPAHT" "GOPATH"))
  (exec-path-from-shell-initialize))

#+END_SRC

** Basic settings
*** General settings
Define some constants and variables:

#+BEGIN_SRC emacs-lisp
(defconst *is-a-mac* (eq system-type 'darwin))

(defvar piger/preferences-dir (expand-file-name "~/Preferences/elisp-init")
  "The directory containing my elisp files.")
#+END_SRC

Add the /preferences dir/ containing some extra emacs scripts to the
load path:

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path piger/preferences-dir)
#+END_SRC

Always use UTF-8:

#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)
#+END_SRC

Disable scrollbars, menu bars etc:

#+BEGIN_SRC emacs-lisp
;; (when (functionp 'menu-bar-mode)
;;   (menu-bar-mode -1))
(when (functionp 'set-scroll-bar-mode)
  (set-scroll-bar-mode 'nil))
;; (when (functionp 'mouse-wheel-mode)
;;   (mouse-wheel-mode -1))
;; (when (functionp 'tooltip-mode)
;;   (tooltip-mode -1))
(when (functionp 'tool-bar-mode)
  (tool-bar-mode -1))
(when (functionp 'blink-cursor-mode)
  (blink-cursor-mode -1))
#+END_SRC

Disable the awful bell:

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function #'ignore)
#+END_SRC

Slow down scrolling on Emacs Cocoa (vanilla):

#+BEGIN_SRC emacs-lisp
;; http://www.emacswiki.org/emacs/SmoothScrolling
(setq mouse-wheel-scroll-amount '(2 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time
#+END_SRC

Save the minibuffer history:

#+BEGIN_SRC emacs-lisp
(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
#+END_SRC

**** Font configuration

Here we could setup fonts; interesting list:

- Menlo 12
- Source Code Pro 11
- Monoid 13

*** Miscellaneous configuration

#+BEGIN_SRC emacs-lisp
;; save bookmarks every time a bookmark is added
(setq bookmark-save-flag 1)

; 29.3 Tabs vs. Spaces
;; Death to the tabs!  However, tabs historically indent to the next
;; 8-character offset; specifying anything else will cause *mass*
;; confusion, as it will change the appearance of every existing file.
;; In some cases (python), even worse -- it will change the semantics
;; (meaning) of the program.
;;
;; Emacs modes typically provide a standard means to change the
;; indentation width -- eg. c-basic-offset: use that to adjust your
;; personal indentation width, while maintaining the style (and
;; meaning) of any files you load.
(setq-default indent-tabs-mode nil)   ;; don't use tabs to indent
(setq-default tab-width 8)            ;; but maintain correct appearance
(setq-default c-basic-offset 4)
(setq-default cperl-indent-level 4)

;;; show column number by default
(setq column-number-mode t)

;; show files size in minibar
(size-indication-mode t)

;; show keystrokes in minibuffer early
(setq echo-keystrokes 0.1)

;; delete region if typing
(pending-delete-mode 1)

;; Kill whole line
(setq kill-whole-line t)

;; make the fringe (gutter) smaller
;; the argument is a width in pixels (the default is 8)
(if (fboundp 'fringe-mode)
    (fringe-mode 4))

;; ask for confirmation before exiting emacs
(setq confirm-kill-emacs 'yes-or-no-p)

;;; transparency
;; (add-to-list 'default-frame-alist '(alpha 95 80))

;; Save clipboard strings into kill ring before replacing them.
;; When one selects something in another program to paste it into Emacs,
;; but kills something in Emacs before actually pasting it,
;; this selection is gone unless this variable is non-nil,
;; in which case the other program's selection is saved in the `kill-ring'
;; before the Emacs kill and one can still paste it using C-y M-y.
;; Jul 2014 - disattivo per problemi su OS X, quando nel "buffer" di osx
;; non c'e' puro testo, emacs rompe il paste.
;; (setq save-interprogram-paste-before-kill t)

;; If non-nil, mouse yank commands yank at point instead of at click.
(setq mouse-yank-at-point t)

;; enable y/n answers
(fset 'yes-or-no-p 'y-or-n-p)

;; frame title
(setq frame-title-format
      '("" invocation-name " - " (:eval (if (buffer-file-name)
                                            (abbreviate-file-name (buffer-file-name))
                                          "%b"))))

;; highlight the current line
(global-hl-line-mode +1)

;; smart tab behavior - indent or complete
(setq tab-always-indent 'complete)

;; disable startup screen
(setq inhibit-startup-screen t)

;; line num
;; (global-linum-mode +1)

;; nice scrolling ???
;; (setq scroll-margin 0
;;       scroll-conservatively 100000
;;       scroll-preserve-screen-position 1)

;;(when *is-a-mac*
;;  (setq mouse-wheel-scroll-amount '(0.001)))

;; show parens mode
(show-paren-mode t)

;; align per puppet
;; https://github.com/jwiegley/dot-emacs/blob/master/lisp/puppet-ext.el
(add-hook 'puppet-mode-hook
          (lambda ()
            (require 'align)
            (add-to-list 'align-rules-list
                         '(ruby-arrow
                           (regexp   . "\\(\\s-*\\)=>\\(\\s-*\\)")
                           (group    . (1 2))
                           (modes    . '(ruby-mode puppet-mode))))))

;;; save-place per salvare la posizione nel buffer quando si esce, tipo
;;; viminfo in vim.
;;; (require 'saveplace)
;;; (setq-default save-place t)
;;; (setq save-place-file (concat user-emacs-directory "places"))

;; enable Multi Hops in TRAMP
;; aka: with this you can edit a remote file with sudo
;; C-x C-f /sudo:root@remote-host:/path/to-file
;; (require 'tramp)
;; (add-to-list 'tramp-default-proxies-alist
;;           '(nil "\\`root\\'" "/ssh:%h:"))
;; (add-to-list 'tramp-default-proxies-alist
;;           '((regexp-quote (system-name)) nil nil))
(require 'tramp)
;; (setq tramp-default-method "ssh")

;; 08/04/2015 - mi stai sul cazzo porcodio, ti commento
;; (add-hook 'text-mode-hook (lambda () (flyspell-mode +1)))

;; reduce the frequency of garbage collection by making it happen on
;; each 50MB of allocated data (the default is on every 0.76MB)
;; (setq gc-cons-threshold 50000000)

;; make a shell script executable automatically on save
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)
#+END_SRC

** Custom functions
A small collection of elisp functions taken from the internet.

#+BEGIN_SRC emacs-lisp
;;; https://github.com/magnars/.emacs.d/blob/master/defuns/buffer-defuns.el
(defun untabify-buffer ()
  (interactive)
  (untabify (point-min) (point-max)))

(defun indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max)))

(defun cleanup-buffer ()
  "Perform a bunch of operations on the whitespace content of a buffer.
Including indent-buffer, which should not be called automatically on save."
  (interactive)
  (untabify-buffer)
  (delete-trailing-whitespace)
  (indent-buffer))

;; shutdown emacs server
;; http://www.emacswiki.org/emacs/EmacsAsDaemon
(defun shutdown-server ()
  "Save buffers, Quit and Shutdown (kill) server"
  (interactive)
  (save-some-buffers)
  (kill-emacs))

(defvar prelude-tips
  '("Press <C-c o> to open a file with external program."
    "Access the official Emacs manual by pressing <C-h r>."
    "Press <C-x v v> to do the next logical version control operation"
    "Press <C-c h> to run helm-mini, your main entry point for opening files"
    "Magit is available with <C-x g>"
    "Press <j u> in Magit to jump to unstaged files"
    "disable-theme can unload a theme"
    "In helm-mini you can search for a @pattern inside a file; M-s to see context"
    "C-c SPC to ace-jump to a word"
    "C-x j to switch window layout (transpose-frame)"
    "Visit the EmacsWiki at http://emacswiki.org to find out even more about Emacs."))

(defun prelude-tip-of-the-day ()
  "Display a random entry from `prelude-tips'."
  (interactive)
  (unless (window-minibuffer-p)
    ;; pick a new random seed
    (random t)
    (message
     (concat "Tip of the day: " (nth (random (length prelude-tips)) prelude-tips)))))

(defun prelude-eval-after-init (form)
  "Add `(lambda () FORM)' to `after-init-hook'.

    If Emacs has already finished initialization, also eval FORM immediately."
  (let ((func (list 'lambda nil form)))
    (add-hook 'after-init-hook func)
    (when after-init-time
      (eval form))))

(prelude-eval-after-init
 ;; greet me with useful tips
 (run-at-time 5 nil 'prelude-tip-of-the-day))

;; google
;; http://emacsredux.com/blog/2013/03/28/google/
(defun google ()
  "Google the selected region if any, display a query prompt otherwise."
  (interactive)
  (browse-url
   (concat
    "https://www.google.com/search?ie=utf-8&oe=utf-8&q="
    (url-hexify-string (if mark-active
                           (buffer-substring (region-beginning) (region-end))
                         (read-string "Google: "))))))

(defun prelude-font-lock-comment-annotations ()
  "Highlight a bunch of well known comment annotations.

This functions should be added to the hooks of major modes for programming."
(font-lock-add-keywords
   nil '(("\\<\\(FIXME\\|TODO\\|NOCOMMIT\\)\\>"
          1 '((:foreground "#d7a3ad") (:weight bold)) t))))
#+END_SRC

Remap =C-a= to a smarter function that go to the beginning of the line
or the first word on the line.

#+BEGIN_SRC emacs-lisp
; http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/
; (prelude)
(defun smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

;; remap C-a to `smarter-move-beginning-of-line'
(global-set-key [remap move-beginning-of-line]
                'smarter-move-beginning-of-line)
#+END_SRC

Use this command to create a new terminal buffer; use =C-x C-j= to
switch to =term-line-mode=, where you can select text and =C-c C-k= to
switch back to =character-mode=.

#+BEGIN_SRC emacs-lisp
(defun visit-term-buffer ()
  "Create or visit a terminal buffer."
  (interactive)
  (if (not (get-buffer "*ansi-term*"))
      (progn
        (split-window-sensibly (selected-window))
        (other-window 1)
        (ansi-term (getenv "SHELL")))
    (switch-to-buffer-other-window "*ansi-term*")))
#+END_SRC

Reopen the current visited file as root using tramp and sudo; I stole
this from prelude but I never used it.

#+BEGIN_SRC emacs-lisp
(defun prelude-sudo-edit (&optional arg)
  "Edit currently visited file as root.

With a prefix ARG prompt for a file to visit.
Will also prompt for a file to visit if current
buffer is not visiting a file."
  (interactive "P")
  (if (or arg (not buffer-file-name))
      (find-file (concat "/sudo:root@localhost:"
                         (ido-read-file-name "Find file(as root): ")))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+END_SRC

Search Wikipedia using =eww=:

#+BEGIN_SRC emacs-lisp
(defun piger/eww-wiki (text)
  "Search TEXT inside Wikipedia using eww."
  (interactive (list (read-string "Wiki for: ")))
  (eww (format "https://en.wikipedia.org/wiki/Special:Search?search=%s"
                (url-encode-url text))))
#+END_SRC

Easily insert RST links (from Fabrizio Furnari):

#+BEGIN_SRC emacs-lisp
(defun insert-rst-reference (url)
  "Inserts footnote link in rst format"
  (interactive "sURL: ")
  (if (use-region-p)
      (let (
            (beg (region-beginning))
            (end (region-end))
            (name (buffer-substring-no-properties (region-beginning) (region-end))))
        
        (goto-char beg)
        (insert "`")
        (goto-char end)
        (forward-char)
        (insert "`_")
        (deactivate-mark)
        (save-excursion
          (goto-char (point-max))
          (newline)
          (insert ".. _" name ": " url))))
  (error "No region selected!"))

(global-set-key (kbd "C-c l") 'insert-rst-reference)
#+END_SRC

Ansi colors (for console dumps from samson, for example):

#+BEGIN_SRC emacs-lisp
(require 'ansi-color)
(defun display-ansi-colors ()
  (interactive)
  (ansi-color-apply-on-region (point-min) (point-max)))
#+END_SRC

Ricompila i file .el che si trovano in ~/.emacs.d:

#+BEGIN_SRC emacs-lisp
(defun byte-compile-init-dir ()
  "Byte-compile all your dotfiles."
  (interactive)
  (byte-recompile-directory user-emacs-directory 0))
#+END_SRC

Per joinare una /region/:

#+BEGIN_SRC emacs-lisp
(defun join-region (beg end)
  "Apply join-line over region."
  (interactive "r")
  (if mark-active
      (let ((beg (region-beginning))
            (end (copy-marker (region-end))))
        (goto-char beg)
        (while (< (point) end)
          (join-line 1)))))
#+END_SRC

** Keyboard bindings

Mac OS X customization. Note that you should use my modified keyboard
layout which permits accented characters.

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  ;; Smart assignments of Mac specific keys
  (setq mac-option-modifier 'meta)
  (setq mac-command-modifier 'hyper)
  (setq mac-function-modifier 'super)  ;; questo sposta SUPER sul tasto Fn
  (setq mac-right-option-modifier nil) ;; questo permette le accentate con ALT destro

  ;; Key bindings with the CMD key
  (global-set-key [(hyper a)] 'mark-whole-buffer)
  (global-set-key [(hyper v)] 'yank)
  (global-set-key [(hyper c)] 'kill-ring-save)
  (global-set-key [(hyper s)] 'save-buffer)
  (global-set-key [(hyper l)] 'goto-line)
  (global-set-key [(hyper w)]
                  (lambda () (interactive) (delete-window)))
  (global-set-key [(hyper z)] 'undo))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; hippie-expand al posto di dabbrev-expand
;; <2015-07-05 Sun> lo disabilito perché mi sembra esagerato.
;(global-set-key (kbd "M-/") 'hippie-expand)

;;; swap default search mode to regexp 
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)

;;; undo con C-z (al posto di minimize window)
(global-unset-key "\C-z")
(global-set-key (kbd "\C-z") 'undo)

;; font-size
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)

;;; browser con M-o
(global-set-key "\M-o" 'browse-url-generic)
(if (and (eq window-system 'x) (eq system-type 'gnu/linux))
    (setq browse-url-generic-program "gvfs-open"))
(if (and (eq window-system 'ns) *is-a-mac*)
    (setq browse-url-generic-program "open"))
(if (and (eq window-system 'mac) *is-a-mac*)
    (setq browse-url-generic-program "open"))

;;; RETURN -> indent (come fa C-j)
; (define-key global-map (kbd "RET") 'newline-and-indent)
#+END_SRC

** Extra scripts

#+BEGIN_SRC emacs-lisp
;; miei script
(when (file-exists-p "~/Preferences/elisp")
  (add-to-list 'load-path "~/Preferences/elisp")

  ; nagios-mode (da elisp locale)
  (autoload 'nagios-mode "nagios-mode" nil t))

;;; themes
;;; https://github.com/owainlewis/emacs-color-themes
; (add-to-list 'load-path "~/Preferences/elisp/themes/tomorrow-theme")
; (add-to-list 'custom-theme-load-path "~/Preferences/elisp/themes/tomorrow-theme")

;; gettext on OS X ships with additional elisp files
(when (file-exists-p "/usr/local/opt/gettext/share/emacs/site-lisp")
  (add-to-list 'load-path "/usr/local/opt/gettext/share/emacs/site-lisp"))
#+END_SRC

** Programming
*** flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck)
#+END_SRC

*** Shell
Not much configuration for shell scripting at the moment. I prefer to
let emacs guess the indentation level. I disable flycheck to avoid
checking the script by running it.

#+BEGIN_SRC emacs-lisp
(add-hook 'sh-mode-look
          (lambda ()
            ;; do not run flycheck
            (flycheck-mode -1)))
#+END_SRC
**** TODO Verify flycheck
*** Python

#+BEGIN_SRC emacs-lisp
(use-package python
  :mode ("\\.py\\'" . python-mode)
  :interpreter ("python" . python-mode)
  :config
  (defun piger/python-mode-hooks ()
    "Defaults for python-mode."
    (subword-mode +1)
    (diminish 'subword-mode)
    (show-paren-mode +1)
    (company-mode +1)
    ;; eldoc needs a running python interpreter
    ;; (eldoc-mode +1)
    ;; unfuck electric indentation
    (setq electric-indent-chars '(?\n)))
  (add-hook 'python-mode-hook 'piger/python-mode-hooks))
#+END_SRC

*** Go

#+BEGIN_SRC emacs-lisp
; Those env variables should be inherithed using exec-path-from-shell
; (setenv "GOPATH" (expand-file-name "~/dev/go"))
; (setenv "PATH" (concat (getenv "PATH") ":" (concat (getenv "GOPATH") "/bin")))
; (setq exec-path (append exec-path (list (expand-file-name "~/dev/go/bin"))))

(eval-after-load 'go-mode
  '(progn
     (defun prelude-go-mode-defaults ()
       (add-hook 'before-save-hook 'gofmt-before-save nil t)
       (set (make-local-variable 'company-backends) '(company-go))
       (go-eldoc-setup)
       (setq tab-width 2)
       (local-set-key (kbd "C-c C-k") 'godoc)
       (subword-mode +1)
       (company-mode)
       (flycheck-mode)
       ; (local-set-key (kbd "M-.") 'godef-jump)
       (diminish 'subword-mode))

     (setq prelude-go-mode-hook 'prelude-go-mode-defaults)
     (add-hook 'go-mode-hook (lambda ()
                               (run-hooks 'prelude-go-mode-hook)))
     
     ;; Enable go-oracle-mode if available
     (let ((oracle (executable-find "oracle")))
       (when oracle
         (load-file "$GOPATH/src/golang.org/x/tools/cmd/oracle/oracle.el")))))
#+END_SRC

**** TODO goimports

Sembra interessante

*** Ruby

Don't want the /magic/ comment.

#+BEGIN_SRC emacs-lisp
(setq ruby-insert-encoding-magic-comment nil)
#+END_SRC

*** CSS

#+BEGIN_SRC emacs-lisp
(use-package css-mode
  :config
  (progn
    (use-package rainbow-mode)
    (setq css-indent-offset 2)
    (rainbow-mode +1)
    (subword-mode +1)
    (diminish 'subword-mode)))
#+END_SRC

*** js2

#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :mode ("\\.js$" . js2-mode)
  :interpreter ("node" . js2-mode)
  :config
  (progn
    (setq-default js2-global-externs '("module", "require", "console",
                                       "jQuery", "$"))
    (add-hook 'js2-init-hook
              (lambda ()
                (when (or (string-match-p "zAFS" (buffer-file-name))
                          (string-match-p "LogIntelligence" (buffer-file-name)))
                  (mapc (lambda (x)
                          (add-to-list 'js2-additional-externs x))
                        (list "Ember" "DS" "App")))))
    (add-hook 'js2-mode-hook (lambda () (subword-mode +1)))
    (add-hook 'js2-mode-hook (lambda () (setq js2-basic-offset 4)))
    (set-variable 'indent-tabs-mode nil)
    ))
#+END_SRC

*** web

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :mode (("\\.erb\\'" . web-mode)
         ("\\.hbs\\'" . web-mode)
         ("\\.html?\\'" . web-mode))
  :init (setq web-mode-engines-alist
              '(("go" . "/go/src/.*\\.html\\'")))
  :config
  (progn
    (add-hook 'web-mode-hook (lambda ()
                               (local-set-key (kbd "RET") 'newline-and-indent)))))

#+END_SRC

**** Aggiungere una regola per impostare l'engine automaticamente

#+BEGIN_SRC emacs-lisp :tangle no
web-mode-engines-alist
(("go" . "/go/src/.*\\.html\\'"))

(setq web-mode-engines-alist (append '(("django" . "/sand/src/.*templates/")) web-mode-engines-alist))
(("django" . "/sand/src/.*templates/") ("go" . "/go/src/.*\\.html\\'"))

web-mode-engines-alist
(("django" . "/sand/src/.*templates/") ("go" . "/go/src/.*\\.html\\'"))
#+END_SRC

*** shell

Hook function for shell-script mode(s). See also =sh-basic-offset=.

#+BEGIN_SRC emacs-lisp :tangle no
;; NOTE: this code block is UNTANGLED! (i.e. disabled)
(add-hook 'sh-mode-hook
          (lambda ()
            (setq indent-tabs-mode nil)))
#+END_SRC

*** logstash

Configure indentation for logstash-conf-mode:

#+BEGIN_SRC emacs-lisp
(custom-set-variables '(logstash-indent 2))
#+END_SRC

** Modes configuration

*** A note on C programming

If you need to alter the indenting value check out the following
variables:

- =c-basic-offset=
- =tab-width=
- =indent-tabs-mode=

Ad esempio:

#+BEGIN_SRC emacs-lisp :tangle no
(setq-default c-basic-offset 8
              tab-width 8
              indent-tabs-mode t)
#+END_SRC

*** ido

#+BEGIN_SRC emacs-lisp
;;; 2/11/2014 - provo a usare Helm
;; (use-package ido
;;   :init
;;   (progn
;;     (ido-mode +1)
;;     (ido-everywhere +1))
;;   :config
;;   (progn
;;     (setq ido-enable-prefix nil
;;           ido-enable-flex-matching t
;;           ido-everywhere t)
;;     (add-to-list 'ido-ignore-files "\\.DS_Store")))

;; (use-package flx-ido
;;   :init (flx-ido-mode 1))
(ido-mode -1)
#+END_SRC

*** helm                                                                :new:
Helm could be a nice ido replacement with more features. I'm still
trying to understand if I like it.

*NOTE* Helm leaves buffers around for the =resume= function (=C-x c
b=); you should not worry about them. See also issue [[https://github.com/emacs-helm/helm/issues/271][#271]].

#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :demand t
  :config
  (progn
    (require 'helm-config)
    (setq helm-candidate-number-limit 100
          helm-split-window-in-side-p t
          helm-ff-skip-boring-files t
          helm-ff-file-name-history-use-recentf t
          helm-buffer-max-length 40)
    (helm-mode 1))
  :diminish helm-mode
  :bind
  (("C-c h" . helm-mini)
   ("M-x" . helm-M-x)))
#+END_SRC

Other random helm things:

#+BEGIN_SRC emacs-lisp
(defvar helm-httpstatus-source
  '((name . "HTTP STATUS")
    (candidates . (("100 Continue") ("101 Switching Protocols")
                   ("102 Processing") ("200 OK")
                   ("201 Created") ("202 Accepted")
                   ("203 Non-Authoritative Information") ("204 No Content")
                   ("205 Reset Content") ("206 Partial Content")
                   ("207 Multi-Status") ("208 Already Reported")
                   ("300 Multiple Choices") ("301 Moved Permanently")
                   ("302 Found") ("303 See Other")
                   ("304 Not Modified") ("305 Use Proxy")
                   ("307 Temporary Redirect") ("400 Bad Request")
                   ("401 Unauthorized") ("402 Payment Required")
                   ("403 Forbidden") ("404 Not Found")
                   ("405 Method Not Allowed") ("406 Not Acceptable")
                   ("407 Proxy Authentication Required") ("408 Request Timeout")
                   ("409 Conflict") ("410 Gone")
                   ("411 Length Required") ("412 Precondition Failed")
                   ("413 Request Entity Too Large")
                   ("414 Request-URI Too Large")
                   ("415 Unsupported Media Type")
                   ("416 Request Range Not Satisfiable")
                   ("417 Expectation Failed") ("418 I'm a teapot")
                   ("422 Unprocessable Entity") ("423 Locked")
                   ("424 Failed Dependency") ("425 No code")
                   ("426 Upgrade Required") ("428 Precondition Required")
                   ("429 Too Many Requests")
                   ("431 Request Header Fields Too Large")
                   ("449 Retry with") ("500 Internal Server Error")
                   ("501 Not Implemented") ("502 Bad Gateway")
                   ("503 Service Unavailable") ("504 Gateway Timeout")
                   ("505 HTTP Version Not Supported")
                   ("506 Variant Also Negotiates")
                   ("507 Insufficient Storage") ("509 Bandwidth Limit Exceeded")
                   ("510 Not Extended")
                   ("511 Network Authentication Required")))
    (action . message)))

(defun helm-httpstatus ()
  (interactive)
  (helm-other-buffer '(helm-httpstatus-source) "*helm httpstatus*"))

(global-set-key (kbd "C-c M-C-h") 'helm-httpstatus)

#+END_SRC

*** ibuffer
Provides a better interface to open buffers.

#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :bind ("C-x C-b" . ibuffer))
#+END_SRC

*** uniquify

#+BEGIN_SRC emacs-lisp
;; meaningful names for buffers with the same name
(use-package uniquify
  :config
  (setq uniquify-buffer-name-style 'forward
        uniquify-separator "/"
        uniquify-after-kill-buffer-p t          ; rename after killing uniquified
        uniquify-ignore-buffers-re "^\\*"))     ; don't muck with special buffers
#+END_SRC

*** windmove

#+BEGIN_SRC emacs-lisp
;;; windmove
;;; per switchare finestra con shift+arrows o alt+arrows
(use-package windmove
  :config (windmove-default-keybindings 'meta))
#+END_SRC

*** transpose-frame

This package provides some useful commands to move windows around, for
example =transpose-frame= on a frame with two vertical windows will
give you an horizontal split.

#+BEGIN_SRC emacs-lisp
(use-package transpose-frame
  :ensure t
  :bind (("C-x j" . transpose-frame)))
#+END_SRC

*** yasnippet

#+BEGIN_SRC emacs-lisp
;;; yasnippet
;; (require 'yasnippet)
;; O si abilita il global-mode, o il minor mode con degli hook per il major-mode
;; del linguaggio visualizzato; nel secondo caso pero' bisogna chiamare manualmente
;; (yas-reload-all)!
;;; (yas-global-mode 1
;;; (yas-reload-all)
#+END_SRC

*** re-builder

#+BEGIN_SRC emacs-lisp
;; editor di regexp che evita la pazzia dei backslash
;; (require 're-builder)
;; evita la pazzia dei backslash
;; (setq reb-re-syntax 'string)
#+END_SRC

*** magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("C-x g" . magit-status))
#+END_SRC

*** git-gutter

13/04/2015 lo commento perche' di default mi sta un po' sul cazzo,
sarebbe piu' comodo attivarlo solo coi /mode/ programmosi...

#+BEGIN_SRC emacs-lisp
(use-package git-gutter
  :diminish git-gutter-mode)
#+END_SRC

*** dired-x

I've followed the installation [[http://www.gnu.org/software/emacs/manual/html_node/dired-x/Installation.html#Installation][guide]].

#+BEGIN_SRC emacs-lisp
(add-hook 'dired-load-hook
          (lambda ()
            (load "dired-x")
            ))
(add-hook 'dired-mode-hook
          (lambda ()
            (hl-line-mode +1)
            ))
#+END_SRC

*** expand-region
This is useful to mark /things/ inside markers, for example the text
inside a quoted string or inside some parenthesis.

#+BEGIN_SRC emacs-lisp
;; expand-region
(use-package expand-region
  :bind ("C-=" . er/expand-region))
#+END_SRC

*** move-text

#+BEGIN_SRC emacs-lisp
;; move-text
;; (require 'move-text)
;; i binding di default sono alt+up e alt+down, gli stessi che uso
;; per switchare finestra.
;; (move-text-default-bindings)
#+END_SRC

*** evil
Because Vim is the best text editor.

#+BEGIN_SRC emacs-lisp
;; enable scroll-down with C-u
(setq evil-want-C-u-scroll t)

(use-package evil
  :config
  (setq evil-emacs-state-cursor  '("red" box)
        evil-normal-state-cursor '("gray" box)
        evil-visual-state-cursor '("gray" box)
        evil-insert-state-cursor '("gray" bar)
        evil-motion-state-cursor '("gray" box)))
#+END_SRC

*** markdown

**** TODO move this section somewhere

#+BEGIN_SRC emacs-lisp
;; Assign a specific mode for certain directories
;; note: you can't chain multiple paths in a single add-to-list call :(
(add-to-list 'auto-mode-alist '("/Documents/appunti/[^/]*\\.txt\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("/Preferences/zsh/" . shell-script-mode))
#+END_SRC

;; rst-mode: default to auto-fill
(add-hook 'rst-mode-hook 'turn-on-auto-fill)

;; po-mode
(add-to-list 'auto-mode-alist '("\\.po\\'\\|\\.po\\." . po-mode))
; (autoload 'po-mode "po-mode" "Major mode for translators to edit PO files" t)

*** prog-mode

**** TODO this must be moved!

#+BEGIN_SRC emacs-lisp
(defun moo-prog-mode-defaults ()
  "Default coding hook, useful with any programming language"
  (rainbow-delimiters-mode t)
  (company-mode t)
  (prelude-font-lock-comment-annotations)
  (subword-mode t)
  (diminish 'subword-mode))

(setq moo-prog-mode-hook 'moo-prog-mode-defaults)

(add-hook 'prog-mode-hook (lambda ()
                            (run-hooks 'moo-prog-mode-hooks)))

;; (add-hook 'prog-mode-hook
;;           (lambda ()
;;             ;; (use-package idle-highlight-mode
;;             ;;   :init (idle-highlight-mode t))
;;             (prelude-font-lock-comment-annotations)
;;             (rainbow-delimiters-mode t)
;;             ;; (setq show-trailing-whitespace t)
;;             (subword-mode t)))
#+END_SRC

*** elisp

#+BEGIN_SRC emacs-lisp
; elisp defaults
(defun pl-elisp-mode-defaults ()
  "Some defaults for elisp mode"
  (turn-on-eldoc-mode)
  (diminish 'eldoc-mode)
  (rainbow-mode +1)
  (diminish 'rainbow-mode))
(setq pl-elisp-mode-hooks 'pl-elisp-mode-defaults)
(add-hook 'emacs-lisp-mode-hook (lambda ()
                                  (run-hooks 'pl-elisp-mode-hooks)))
#+END_SRC

*** projectile

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :config
  (progn
    (projectile-global-mode +1)
    (setq projectile-mode-line '(:eval (format " &{%s}" (projectile-project-name))))
    (require 'helm-projectile)
    (helm-projectile-on)))
#+END_SRC

*** company (completion)

#+BEGIN_SRC emacs-lisp
(use-package company)
#+END_SRC

For python you need:

- anaconda-mode (+ pip install jedi)
- company
- company-anaconda

And run this code:
#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'company-backends 'company-anaconda)
#+END_SRC

To start completion you can use =C-M-i=.

*** apache

#+BEGIN_SRC emacs-lisp
;; apache-mode
(use-package apache-mode
  :mode (("\\.htaccess\\'" . apache-mode)
         ("sites-\\(available|enabled\\)/" . apache-mode)))
#+END_SRC

*** outline

#+BEGIN_SRC emacs-lisp
;; code folding with vim compatibility
;; https://raw.githubusercontent.com/yyetim/emacs-configuration/master/elisp/vim-fold.el
;; modificato leggermente, perche' io i marker li uso anche senza numero (e.g. "{{{1")
;; per indicare il livello di outline.
(defun set-vim-foldmarker (fmr)
  "Configure a Vim-like foldmarker for the current buffer, used with outline-mode"
  (interactive "sSet local Vim foldmarker: ")
  (if (equal fmr "")
      (message "Abort")
    (setq fmr (regexp-quote fmr))
    (set (make-local-variable 'outline-regexp)
         (concat ".*" fmr "\\([0-9]+\\)?"))
    (set (make-local-variable 'outline-level)
         `(lambda ()
            (save-excursion
              (re-search-forward
               ,(concat fmr "\\([0-9]+\\)") nil t)
              (if (match-string 1)
                  (string-to-number (match-string 1))
                (string-to-number "0")))))))
;; (add-hook 'outline-minor-mode-hook
;;        (lambda () (local-set-key "\C-c\C-c"
;;                                  outline-mode-prefix-map)))
(global-set-key (kbd "C-<tab>") 'outline-toggle-children)
#+END_SRC

*** volatile-highlights

#+BEGIN_SRC emacs-lisp
;; (use-package volatile-highlights
;;   :init (volatile-highlights-mode +1)
;;   :diminish volatile-highlights-mode)

(require 'volatile-highlights)
(volatile-highlights-mode t)
(eval-after-load "volatile-highlights" '(diminish 'volatile-highlights-mode))
#+END_SRC

*** recentf
Keep track of recent used files.

#+BEGIN_SRC emacs-lisp
(use-package recentf
  :config
  (progn
    (setq recentf-max-saved-items 300
          recentf-max-menu-items 20
          recentf-exclude '(".recentf" "/elpa/" "\\.ido.last" "/ssh:" "/tmp/"
                            "COMMIT_EDITMSG" ".gz")
          recentf-auto-cleanup 600)
    (recentf-mode +1)))
#+END_SRC

*** undo-tree

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :config (global-undo-tree-mode +1)
  :diminish undo-tree-mode)
#+END_SRC

*** winner
Keep track of window layouts and buffers and *try* to restore them.

Bindings: =C-c LEFT= and =C-c RIGHT=.

#+BEGIN_SRC emacs-lisp
(use-package winner
  :config (winner-mode +1))
#+END_SRC

*** anzu
Anzu shows an indicator inside the minibar when you are searching for
things telling you how many matches was found for the current search.

#+BEGIN_SRC emacs-lisp
(use-package anzu
  :diminish anzu-mode
  :config
  (progn
    (global-anzu-mode +1)
    (set-face-attribute 'anzu-mode-line nil
                        :foreground "orange" :weight 'bold)
    (setq anzu-minimum-input-length 3)))
#+END_SRC

*** Spellcheck and flyspell settings
Spell checking.

Per usare =hunspell= bisogna scaricare i dizionari dal sito delle
[[http://extensions.openoffice.org/][extension di OpenOffice]] che altro non sono file zippati; bisogna
estrarre i file =.aff= e =.dic= e copiarli in =~/Library/Spelling=.

#+BEGIN_SRC emacs-lisp
;;; hunspell on OS X seems to have problems with flyspell.
;; (if (file-exists-p "/usr/local/bin/hunspell")
;;     (progn
;;       (setq-default ispell-program-name "hunspell"
;;                     ispell-dictionary "en_US"))
;;   (progn (setq-default ispell-program-name "aspell")
;;          (setq ispell-personal-dictionary "~/.flydict"
;;                ispell-extra-args '("--sug-mode=normal" "--ignore=3"))))

(setq-default ispell-program-name "aspell")
(setq ispell-personal-dictionary "~/.flydict"
      ispell-extra-args '("--sug-mode=normal" "--ignore=3"))

(use-package flyspell
  :config
  (define-key flyspell-mode-map (kbd "M-n") 'flyspell-goto-next-error)
  (define-key flyspell-mode-map (kbd "M-.") 'ispell-word))
#+END_SRC

*** ace-jump                                                            :new:
Quick jump to a word.

#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
  :bind ("C-c SPC" . ace-jump-mode))
#+END_SRC

**** TODO C-c SPC binding conflicts with org

*** org

#+BEGIN_SRC emacs-lisp
; general setup
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(global-set-key "\C-c\M-p" 'org-babel-previous-src-block)
(global-set-key "\C-c\M-n" 'org-babel-next-src-block)
(global-set-key "\C-cS" 'org-babel-previous-src-block)
(global-set-key "\C-cs" 'org-babel-next-src-block)

; capture-file
(setq org-directory "~/Dropbox/org")
(setq org-default-notes-file (concat org-directory "/notes.org"))
;; (setq org-todo-keywords
;;       '((sequence "TODO" "VERIFY" "|" "DONE" "DELEGATED")))
(setq org-tags-alist
      '((sequence "work" "personal" "computer" "blog")))
;; mobile org
(setq org-mobile-directory "~/Dropbox/org/mobile")
(setq org-mobile-inbox-for-pull (concat org-directory "/index.org"))

;; add timestamp to closed TODO entries
(setq org-log-done 'time)

;; highlight code blocks
(setq org-src-fontify-natively t)

;; turn off source blocks default indentation
(setq org-edit-src-content-indentation 0)

(add-hook 'org-mode-hook 'turn-on-auto-fill)

(setq org-todo-keywords
      (quote
       ((sequence "TODO(t)" "INPROGRESS(i)" "WAITING(w@/!)"
                  "|" "DONE(d!)" "DEFERRED(f@/!)" "CANCELLED(c@)"))))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "brown1" :weight bold)
              ("INPROGRESS" :foreground "deep sky blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("WAITING" :foreground "orange" :weight bold)
              ("DEFERRED" :foreground "goldenrod" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold))))
#+END_SRC

*** alert                                                               :new:

Use terminal-notifier to notify stuff.

#+BEGIN_SRC emacs-lisp
(defun my/terminal-notifier-notify (title message)
  "Show a message with `terminal-notifier-command`."
  (interactive)
  (start-process "terminal-notifier"
                 "*terminal-notifier*"
                 "terminal-notifier"
                 "-title" title
                 "-message" message))

(use-package alert
  :config
  (progn
    (alert-define-style 'terminal-notifier
                        :title "terminal-notifier"
                        :notifier
                        (lambda (info)
                          (my/terminal-notifier-notify
                           (plist-get info :title)
                           (plist-get info :message))
                          ;; The :category of the alert
                          (plist-get info :category)
                          ;; The major-mode this alert relates to
                          (plist-get info :mode)
                          ;; The buffer the alert relates to
                          (plist-get info :buffer)
                          ;; Severity of the alert.  It is one of:
                          ;;   `urgent'
                          ;;   `high'
                          ;;   `moderate'
                          ;;   `normal'
                          ;;   `low'
                          ;;   `trivial'
                          (plist-get info :severity)
                          ;; Whether this alert should persist, or fade away
                          (plist-get info :persistent)
                          ;; Data which was passed to `alert'.  Can be
                          ;; anything.
                          (plist-get info :data))

                        ;; Removers are optional.  Their job is to remove
                        ;; the visual or auditory effect of the alert.
                        :remover
                        (lambda (info)
                          ;; It is the same property list that was passed to
                          ;; the notifier function.
                          ))
    (if (eq (window-system) 'ns)
        (setq alert-default-style 'terminal-notifier))))
#+END_SRC

*** smart-mode-line

I'm trying [[https://github.com/Malabarba/smart-mode-line][smart-mode-line]] just to have a better visual of the current
active window.

#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :ensure t
  :init (setq sml/theme 'dark)
  :config (sml/setup))
#+END_SRC

*** dtrt-indent 						:new:

[[https://github.com/jscheid/dtrt-indent][dtrt-indent]] is a minor mode which guesses the indentation offset of a
source file and adjust the corresponding configuration in Emacs.

#+BEGIN_SRC emacs-lisp
(use-package dtrt-indent)
#+END_SRC

*** which-key								:new:

[[https://github.com/justbur/emacs-which-key][which-key]] whill show a list of possible completion for the key binding
typed so far; it's very useful for less used modes (like Org), for
example I can press =C-c= and then read the list of org bindings.

#+BEGIN_SRC emacs-lisp
;; (use-package which-key
;;   :ensure t
;;   :diminish which-key-mode
;;   :config (which-key-mode))
#+END_SRC

*** window-numbering

Per selezionare le finestre come su irssi con ALT-1, ALT-2, etc.

#+BEGIN_SRC emacs-lisp
(use-package "window-numbering"
  :ensure t
  :config (window-numbering-mode))
#+END_SRC

*** dash-at-point

Per usare dash su OS X

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (use-package "dash-at-point"
    :ensure t))
#+END_SRC

** Aliases
I'd like to have more aliases... :)

#+BEGIN_SRC emacs-lisp
(defalias 'qrr 'query-replace-regexp)
#+END_SRC

** OS Specific settings

#+BEGIN_SRC emacs-lisp
(when *is-a-mac*
  ;; try to use GNU ls from coreutils (installed with homebrew)
  (let ((gnu-ls "/usr/local/bin/gls"))
    (when (file-exists-p gnu-ls)
      (setq insert-directory-program gnu-ls)
      (setq dired-listing-switches "-aBhl --group-directories-first")))

  ;; non so se serve anche questo:
  ;; (setq ls-lisp-use-insert-directory-program t)  ;; use external ls

  ;; default browser
  (setq browse-url-browser-function 'browse-url-default-macosx-browser)

  ;; in dired use the trash
  (setq delete-by-moving-to-trash t))
#+END_SRC

** Local settings
I like to keep a /local/ settings file to override or further
customize programs on each of my workstations.

#+BEGIN_SRC emacs-lisp
(let ((piger/local-config
       (concat (file-name-as-directory piger/preferences-dir) "init-local.el")))
  (when (file-exists-p piger/local-config)
    (load piger/local-config)))
#+END_SRC
